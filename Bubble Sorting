# Worst and Average Case Time Complexity: O(n*n). Worst case occurs when array is reverse sorted.
#
# Best Case Time Complexity: O(n). Best case occurs when array is already sorted.

l=[6,8,2,3,0,1]

#method 1
#time complexity O(n2)

def Bubble(arr):
    for i in range(len(arr)):
        for j in range(i+1,len(arr)):
            if arr[i]>arr[j]:
                temp = arr[i]
                arr[i] = arr[j]
                arr[j] = temp
    return arr

#print(Bubble(l))


#Method 2  in case if they are sorted then optimize the solution

def SortedArray(arr):
    for i in range(len(arr)):
        swap = False
        for j in range(i+1,len(arr)):
            print("goint")
            if arr[i]> arr[j]:
                arr[i] ,arr[j]=arr[j],arr[i]
                swap = True
        if not swap:
            break
    return arr
s = [11, 12, 22, 25, 34, 64, 90]
print(SortedArray(s))


#method3 with recursion

def BubbleWihtRecursion(r):
    for i ,num in enumerate(r):
        try:
            if r[i+1] < r[i]:
                r[i+1] , r[i] = r[i],r[i+1]
                BubbleWihtRecursion(r)
        except IndexError:
            pass
    return r

r = l
print(BubbleWihtRecursion(r))

